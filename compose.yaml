services:
  frontend:
    container_name: "tino-blog-frontend"
    restart: unless-stopped
    build:
      context: ./frontend
      tags:
        - tino-blog-frontend:1.2.0
    ports:
      - "443:443"
    environment:
      - DOMAIN_NAME=${DOMAIN_NAME}
    volumes:
      - ${SSL_CERTIFICATES_PATH}:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - network

  backend:
    container_name: "tino-blog-backend"
    restart: unless-stopped
    build:
      context: ./backend
      tags:
        - tino-blog-backend:1.2.0
    ports:
      - "8080:8080"
    environment:
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - db
    networks:
      - network

  db:
    image: postgres:17
    container_name: "tino-blog-db"
    restart: always
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth=scram-sha-256
    volumes:
      # the prefix "01", "02" (etc.) is necessary because they're executed in alphabetical order!
      - ./backend/src/main/resources/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./backend/src/main/resources/data.sql:/docker-entrypoint-initdb.d/02-data.sql
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - network

volumes:
  db-data:

networks:
  network:
    driver: bridge
